<?xml version="1.0" encoding="UTF-8"?>
<!--
  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->
<!DOCTYPE document [
  <!ENTITY project SYSTEM "project.xml">
]>
<document url="oauth2-bearer-authenticator.html">

  &project;

  <properties>
    <title>OAuth2 Bearer Token Authenticator</title>
  </properties>

<body>

<section name="Table of Contents">
<toc/>
</section>

<section name="Introduction">

<p>The <strong>OAuth2BearerAuthenticator</strong> is a Tomcat <a href="valve.html">Valve</a>
that implements OAuth2 Bearer Token authentication as described in
<a href="https://tools.ietf.org/html/rfc6750">RFC 6750</a>. It validates JWT
(JSON Web Token) bearer tokens from the HTTP Authorization header and integrates
with Tomcat's existing Realm infrastructure for user authentication and authorization.</p>

<p>Key features include:</p>
<ul>
  <li>JWT token validation with HMAC (HS256, HS384, HS512) and RSA (RS256, RS384, RS512) signatures</li>
  <li>Token expiration and not-before validation with configurable clock skew</li>
  <li>Issuer and audience validation</li>
  <li>Role extraction from JWT claims</li>
  <li>Token caching for improved performance</li>
  <li>Integration with existing Realm implementations</li>
  <li>Support for preemptive authentication</li>
</ul>

</section>

<section name="Attributes">

<subsection name="Common Attributes">

<p>The OAuth2BearerAuthenticator supports all the standard Valve attributes
documented in the <a href="valve.html">Valve</a> documentation.</p>

</subsection>

<subsection name="OAuth2 Bearer Token Specific Attributes">

<attributes>

  <attribute name="secretKey" required="false">
    <p>The Base64-encoded secret key for HMAC-based JWT validation (HS256, HS384, HS512).
    Either <code>secretKey</code> or <code>publicKey</code> must be configured, but not both.</p>
  </attribute>

  <attribute name="publicKey" required="false">
    <p>The Base64-encoded public key (X.509 format) for RSA-based JWT validation
    (RS256, RS384, RS512). Either <code>secretKey</code> or <code>publicKey</code>
    must be configured, but not both.</p>
  </attribute>

  <attribute name="publicKeyAlgorithm" required="false">
    <p>The algorithm for the public key. Default is <code>RSA</code>.</p>
  </attribute>

  <attribute name="issuer" required="false">
    <p>The expected token issuer for validation. If not set or empty, issuer
    validation is skipped.</p>
  </attribute>

  <attribute name="audience" required="false">
    <p>The expected token audience for validation. If not set or empty, audience
    validation is skipped.</p>
  </attribute>

  <attribute name="clockSkewSeconds" required="false">
    <p>The allowed clock skew in seconds for time-based validations (expiration
    and not-before claims). Default is <code>60</code> seconds.</p>
  </attribute>

  <attribute name="tokenCacheSize" required="false">
    <p>The maximum number of validated tokens to cache for improved performance.
    Set to <code>0</code> to disable caching. Default is <code>1000</code>.</p>
  </attribute>

  <attribute name="rolesClaimName" required="false">
    <p>The name of the JWT claim containing user roles. Default is <code>roles</code>.</p>
  </attribute>

  <attribute name="realmAuthentication" required="false">
    <p>If <code>true</code>, the username from the token will be authenticated
    against the configured Realm. If <code>false</code>, a GenericPrincipal will
    be created directly from the token claims. Default is <code>true</code>.</p>
  </attribute>

  <attribute name="extractRolesFromToken" required="false">
    <p>If <code>true</code>, roles are extracted from the token's roles claim.
    If <code>false</code>, only Realm-provided roles are used (requires
    <code>realmAuthentication=true</code>). Default is <code>true</code>.</p>
  </attribute>

</attributes>

</subsection>

</section>

<section name="Configuration Examples">

<subsection name="HMAC-Based Authentication">

<p>This example configures the authenticator to validate JWT tokens signed with
HMAC-SHA256. The secret key must be shared between the token issuer and Tomcat.</p>

<source><![CDATA[<Context>
  <Valve className="org.apache.catalina.authenticator.OAuth2BearerAuthenticator"
         secretKey="your-base64-encoded-secret-key"
         issuer="https://your-auth-server.com"
         audience="your-application-id"
         clockSkewSeconds="60"
         tokenCacheSize="1000" />

  <Realm className="org.apache.catalina.realm.UserDatabaseRealm"
         resourceName="UserDatabase"/>
</Context>]]></source>

</subsection>

<subsection name="RSA-Based Authentication">

<p>This example configures the authenticator to validate JWT tokens signed with
RSA-SHA256. Only the public key is needed on the Tomcat side.</p>

<source><![CDATA[<Context>
  <Valve className="org.apache.catalina.authenticator.OAuth2BearerAuthenticator"
         publicKey="MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA..."
         publicKeyAlgorithm="RSA"
         issuer="https://your-auth-server.com"
         audience="your-application-id"
         realmAuthentication="true"
         extractRolesFromToken="true" />

  <Realm className="org.apache.catalina.realm.DataSourceRealm"
         dataSourceName="jdbc/UserDB"
         userTable="users" userNameCol="user_name" userCredCol="user_pass"
         userRoleTable="user_roles" roleNameCol="role_name"/>
</Context>]]></source>

</subsection>

<subsection name="Standalone Authentication (No Realm)">

<p>This example configures the authenticator to create principals directly from
token claims without consulting a Realm. Useful when all user information is
contained in the JWT token.</p>

<source><![CDATA[<Context>
  <Valve className="org.apache.catalina.authenticator.OAuth2BearerAuthenticator"
         secretKey="your-base64-encoded-secret-key"
         issuer="https://your-auth-server.com"
         audience="your-application-id"
         realmAuthentication="false"
         extractRolesFromToken="true"
         rolesClaimName="roles" />
</Context>]]></source>

</subsection>

<subsection name="Web Application Configuration">

<p>The web application's <code>web.xml</code> must be configured to use Bearer
authentication and define security constraints:</p>

<source><![CDATA[<web-app>
  <security-constraint>
    <web-resource-collection>
      <web-resource-name>Protected Area</web-resource-name>
      <url-pattern>/api/*</url-pattern>
    </web-resource-collection>
    <auth-constraint>
      <role-name>user</role-name>
    </auth-constraint>
  </security-constraint>

  <login-config>
    <auth-method>BEARER</auth-method>
    <realm-name>My Application</realm-name>
  </login-config>

  <security-role>
    <role-name>user</role-name>
  </security-role>
  <security-role>
    <role-name>admin</role-name>
  </security-role>
</web-app>]]></source>

</subsection>

</section>

<section name="JWT Token Format">

<p>The authenticator expects JWT tokens in the standard format with three
Base64URL-encoded parts separated by dots:</p>

<source>header.payload.signature</source>

<subsection name="Header">

<p>The JWT header must contain the algorithm claim:</p>

<source><![CDATA[{
  "alg": "HS256",
  "typ": "JWT"
}]]></source>

<p>Supported algorithms: HS256, HS384, HS512, RS256, RS384, RS512</p>

</subsection>

<subsection name="Payload">

<p>The JWT payload must contain at least a subject (<code>sub</code>) claim.
Standard claims that are validated if present:</p>

<ul>
  <li><code>sub</code> (subject): Username/user identifier (required)</li>
  <li><code>exp</code> (expiration): Token expiration time (Unix timestamp)</li>
  <li><code>nbf</code> (not before): Time before which token is not valid</li>
  <li><code>iss</code> (issuer): Token issuer (validated if configured)</li>
  <li><code>aud</code> (audience): Token audience (validated if configured)</li>
  <li><code>iat</code> (issued at): Token issue time</li>
</ul>

<p>Example payload:</p>

<source><![CDATA[{
  "sub": "john.doe",
  "exp": 1735689600,
  "iat": 1735686000,
  "iss": "https://your-auth-server.com",
  "aud": "your-application-id",
  "roles": ["user", "admin"]
}]]></source>

<p>The roles can be specified as:</p>
<ul>
  <li>Array of strings: <code>["role1", "role2"]</code></li>
  <li>Comma-separated string: <code>"role1,role2"</code></li>
  <li>Space-separated string: <code>"role1 role2"</code></li>
</ul>

</subsection>

</section>

<section name="Client Usage">

<p>Clients must include the JWT token in the Authorization header using the
Bearer authentication scheme:</p>

<source>Authorization: Bearer &lt;jwt-token&gt;</source>

<p>Example HTTP request:</p>

<source><![CDATA[GET /api/protected-resource HTTP/1.1
Host: example.com
Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJqb2huLmRvZSIsImV4cCI6MTczNTY4OTYwMCwiaWF0IjoxNzM1Njg2MDAwLCJyb2xlcyI6WyJ1c2VyIl19.signature]]></source>

</section>

<section name="Error Responses">

<p>When authentication fails, the authenticator returns an HTTP 401 Unauthorized
response with a WWW-Authenticate header following RFC 6750:</p>

<source>WWW-Authenticate: Bearer realm="My Application", error="invalid_token", error_description="Token has expired"</source>

<p>Common error codes:</p>
<ul>
  <li><code>invalid_token</code>: Token is malformed, expired, or invalid</li>
  <li><code>invalid_request</code>: Authorization header is missing or malformed</li>
</ul>

</section>

<section name="Security Considerations">

<ul>
  <li><strong>Use HTTPS:</strong> Always use HTTPS in production to protect
      tokens from interception.</li>
  <li><strong>Secret Key Security:</strong> Keep secret keys secure and use strong,
      randomly-generated keys of at least 256 bits.</li>
  <li><strong>Token Expiration:</strong> Use short-lived tokens (e.g., 15-60 minutes)
      with refresh token mechanisms.</li>
  <li><strong>Clock Skew:</strong> Keep clock skew settings reasonable (60 seconds
      is typical) to prevent replay attacks.</li>
  <li><strong>Issuer/Audience Validation:</strong> Always configure issuer and
      audience validation in production.</li>
  <li><strong>Token Caching:</strong> Be aware that cached tokens remain valid
      until they expire, even if revoked at the issuer.</li>
</ul>

</section>

<section name="Integration with Existing Realms">

<p>When <code>realmAuthentication</code> is enabled (default), the authenticator
integrates with Tomcat's Realm infrastructure:</p>

<ol>
  <li>The JWT token is validated for signature and expiration</li>
  <li>The username (from the <code>sub</code> claim) is authenticated against the Realm</li>
  <li>If <code>extractRolesFromToken</code> is true, roles from the token are
      merged with roles from the Realm</li>
  <li>The resulting Principal is used for authorization</li>
</ol>

<p>This allows you to:</p>
<ul>
  <li>Verify that users exist in your user database</li>
  <li>Combine centrally-managed roles (from tokens) with application-specific roles (from Realm)</li>
  <li>Use existing Realm implementations (DataSourceRealm, JNDIRealm, etc.)</li>
</ul>

</section>

<section name="Performance Tuning">

<subsection name="Token Caching">

<p>Token caching significantly improves performance by avoiding repeated
cryptographic signature validation. The cache uses the complete token string
as the key and stores validated claims.</p>

<p>Adjust <code>tokenCacheSize</code> based on:</p>
<ul>
  <li>Number of concurrent users</li>
  <li>Token lifetime</li>
  <li>Available memory</li>
</ul>

<p>For high-traffic applications with many users, consider increasing the cache
size to 5000-10000.</p>

</subsection>

<subsection name="Realm Integration">

<p>If all required user information is available in the JWT token, disable
Realm authentication for better performance:</p>

<source><![CDATA[<Valve className="org.apache.catalina.authenticator.OAuth2BearerAuthenticator"
       ...
       realmAuthentication="false"
       extractRolesFromToken="true" />]]></source>

</subsection>

</section>

</body>

</document>
